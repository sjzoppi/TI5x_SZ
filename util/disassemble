#!/usr/bin/python3
#+
# Very simple symbolic disassembler for ti5x programs. Reads a sequence of numeric
# codes from standard input, and writes a symbolic representation to standard output.
# If --locations is specified on the command line, then location markers (sequence of
# digits ending with colon) will also be output before each instruction; the assembler
# will check these against the current location and report any discrepancy.
#
# Copyright 2011 Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Modified  2016 Steven Zoppi <about-ti5x@zoppi.org>.
#	Fixed Disassembly Table to be compatible with the round-trip
#	Syntax required by the assemble (python) script.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#-

import sys

def simple(sym) :
    return {"sym" : sym}
#end simple

def regop(op, hassym) :
    entry = {"expect" : "reg", "sym" : op, "hassym" : hassym}
    return entry
#end regop

def locop(op) :
    return {"sym" : op, "expect" : "loc"}
#end locop

def pgm() :
    global expect
    if not inv_state :
        expect = "reg"
    #end if
#end pgm

def sbr() :
    global expect
    if not inv_state :
        expect = "loc"
    #end if
#end sbr

def fix() :
    global expect
    if not inv_state :
        expect = "flag"
    #end if
#end fix

codes = \
    {
        # digits 0-9 handled specially
        11 : simple("A"),
        12 : simple("B"),
        13 : simple("C"),
        14 : simple("D"),
        15 : simple("E"),
        16 : simple("A'"),
        17 : simple("B'"),
        18 : simple("C'"),
        19 : simple("D'"),
        10 : simple("E'"),
        22 : {"sym" : "INV", "modifier" : True},
        23 : simple("lnx"),
        24 : simple("CE"),
        25 : simple("CLR"),
        27 : {"sym" : "2nd INV", "modifier" : True},
        28 : simple("log"),
        29 : simple("CP"),
        20 : simple("2nd CLR"),
        # 31 invalid
        32 : simple("x⇌t"),
        33 : simple("x²"),
        34 : simple("√x"),
        35 : simple("1/x"),
        36 : {"sym" : "Pgm", "act" : pgm},
        37 : simple("P→R"),
        38 : simple("sin"),
        39 : simple("cos"),
        30 : simple("tan"),
        # 41 invalid
        42 : regop("STO", True),
        43 : regop("RCL", True),
        44 : regop("SUM", True),
        45 : simple("y**x"),
        # 46 invalid
        47 : simple("CMs"),
        48 : regop("Exc", True),
        49 : regop("Prd", True),
        # 40 (Ind) specially handled
        # 51 invalid
        52 : simple("EE"),
        53 : simple("("),
        54 : simple(")"),
        55 : simple("÷"),
        # 56 invalid
        57 : simple("Eng"),
        58 : {"sym" : "Fix", "act" : fix},
        59 : simple("Int"),
        50 : simple("|x|"),
        61 : locop("GTO"),
        #    20170103 SZ: Modified the following to drop the syntax "<blah> IND" in favor
        #                 of the shorthand version of the indirect referencing.  This
        #                 syntactic change enables these to be used as labels (required
        #                 for the Marine Navigation Library
        62 : regop("PG*", True),
        63 : regop("EX*", True),
        64 : regop("PR*", True),
        65 : simple("×"),
        66 : simple("Pause"),
        67 : locop("x=t"),
        68 : simple("Nop"),
        69 : regop("Op", True),
        60 : simple("Deg"),
        71 : {"sym" : "SBR", "act" : sbr},
        #    20170103 SZ: Modified the following to drop the syntax "<blah> IND" in favor
        #                 of the shorthand version of the indirect referencing.  This
        #                 syntactic change enables these to be used as labels (required
        #                 for the Marine Navigation Library
        72 : regop("ST*", True),
        73 : regop("RC*", True),
        74 : regop("SM*", True),
        75 : simple("-"),
        76 : {"sym" : "Lbl", "expect" : "label"},
        77 : locop("x≥t"),
        78 : simple("∑+"),
        79 : simple("mean(x)"),
        70 : simple("Rad"),
        81 : simple("RST"),
        82 : regop("HIR", True),
        #    20170103 SZ: Modified the following to drop the syntax "<blah> IND" in favor
        #                 of the shorthand version of the indirect referencing.  This
        #                 syntactic change enables these to be used as labels (required
        #                 for the Marine Navigation Library
        83 : regop("GT*", True),
        84 : regop("OP*", True),
        85 : simple("+"),
        86 : {"sym" : "Stflg", "expect" : "flag"},
        87 : {"sym" : "Ifflg", "expect" : "flag", "expect2" : "loc"},
        88 : simple("D.MS"),
        89 : simple("π"),
        80 : simple("Grad"),
        91 : simple("R/S"),
        92 : simple("INV SBR"),
        93 : simple("."),
        94 : simple("+/-"),
        95 : simple("="),
        96 : simple("2nd R/S"),
        97 : {"sym" : "Dsz", "expect" : "unitreg", "expect2" : "loc"},
        98 : simple("Adv"),
        99 : simple("Prt"),
        90 : simple("List"),
    }

exitstatus = 0 # to begin with

def report_error(msg) :
    global inv_state, was_modifier, expect, exitstatus
    sys.stderr.write("Disassembler error at step: %d line: %d, column: %d error: %s\n" % (step_nr, line_nr, col_nr, msg))
    exitstatus = 2
    # reset everything to try to recover from error:
    inv_state = False
    was_modifier = False
    expect = None
#end report_error

show_location = False

if len(sys.argv) == 2 and sys.argv[1] == "--locations" :
    show_location = True
elif len(sys.argv) == 2 and sys.argv[1] == "--nolocations" :
    show_location = False
elif len(sys.argv) > 1 :
    sys.stderr.write("Unexpected Args (%d)" % (len(sys.argv)))
    sys.stderr.write("Argument 2: %s\n" % (sys.argv[2]))
    raise RuntimeError("unexpected args")
#end if

was_modifier = False
inv_state = False
expect = None
last_was_digit = False
decimal_seen = False

curline = ""
cursym = None
EOF = False
was_newline = True
loc = None
lastcode = None
line_nr = 0
curloc = -1
step_nr = -1
while True :
    if len(curline) == 0 and not EOF :
        curline += sys.stdin.readline()
        if len(curline) == 0 :
            EOF = True
        #end if
    #end if
    if len(curline) != 0 :
        ch = curline[0]
        curline = curline[1:]
    else :
        ch = " "
    #end if
    if was_newline :
        line_nr += 1
        col_nr = 0
        was_newline = False
    #end if
    if ch == "\n" :
        was_newline = True
    else :
        col_nr += 1
    #end if
    if cursym == None :
        if ch > " " :
            cursym = ch # start collecting next symbol
        else :
            if EOF :
                break
        #end if
    else :
        if ch > " " :
            cursym += ch
        else : # got a complete symbol
            try :
                val = int(cursym)
                step_nr += 1
            except ValueError :
                report_error("non-numeric code \"%s\"" % cursym)
                val = None
            #end try
            if val != None and val >= 100 :
                report_error("not a two-digit code: %d\n" % val)
                val = None
            #end if
            if val != None :
                curloc += 1
                if expect != None :
                    if expect == "loc2" :
                        sys.stdout.write("%03d" % (loc * 100 + val))
                        expect = None
                    elif expect == "loc" :
                        expect = None
                        if val < 10 :
                            loc = val
                            expect = "loc2"
                        elif val == 40 :
                            sys.stdout.write("Ind ")
                            expect = "reg"
                        else :
                            if val in codes and "sym" in codes[val] :
                                sys.stdout.write(codes[val]["sym"])
                            else :
                                report_error("cannot use code %02d as label" % val)
                            #end if
                        #end if
                    elif expect == "reg" :
                        sys.stdout.write("%02d" % val)
                        expect = None
                    elif expect == "flag" or expect == "unitreg" :
                        if val == 40 :
                            sys.stdout.write("Ind ")
                            expect = "reg"
                        elif expect == "unitreg" or val < 10 :
                            sys.stdout.write("%1d" % val)
                            expect = None
                        else :
                            report_error("invalid flag code %02d" % val)
                            expect = None
                        #end if
                    elif expect == "label" :
                        expect = None
                        if val in codes and codes[val].get("hassym", True) :
                            sys.stdout.write(codes[val]["sym"])
                        else :
                            report_error("cannot use code %02d as label" % val)
                        #end if
                    #end if
                    if expect == None and lastcode != None :
                        if "expect" in lastcode :
                            expect = lastcode["expect"]
                            del lastcode["expect"]
                            sys.stdout.write(" ")
                        else :
                            sys.stdout.write("\n")
                            lastcode = None
                        #end if
                    #end if
                elif val < 10 or val == 93 and not decimal_seen :
                    # digit
                    if not last_was_digit and show_location :
                        sys.stdout.write("%03d: " % curloc)
                    #end if
                    if val < 10 :
                        sys.stdout.write(chr(val + 48))
                    else :
                        sys.stdout.write(".")
                        decimal_seen = True
                    #end if
                    last_was_digit = True
                else :
                    if last_was_digit :
                        sys.stdout.write("\n")
                        last_was_digit = False
                        decimal_seen = False
                    #end if
                    if val in codes :
                        code = codes[val]
                        if show_location and not inv_state :
                            sys.stdout.write("%03d: " % curloc)
                        #end if
                        sys.stdout.write(code["sym"])
                        was_modifier = "modifier" in code
                        if "act" in code :
                            code["act"]()
                            if expect != None :
                                lastcode = {} # just to trigger end-of-operand processing
                            #end if
                        elif "expect" in code :
                            lastcode = dict((k, code[k]) for k in code if k not in ("expect", "expect2"))
                            if "expect2" in code :
                                lastcode["expect"] = code["expect2"]
                            #end if
                            expect = code["expect"]
                        #end if
                        if expect != None or was_modifier :
                            sys.stdout.write(" ") # separate following op/operands
                        else :
                            sys.stdout.write("\n")
                        #end if
                        if was_modifier :
                            inv_state = True
                        #end if
                    else :
                        report_error("invalid code %02d" % val)
                    #end if
                    if not was_modifier :
                        inv_state = False
                    #end if
                #end if
            #end if
            cursym = None
        #end if
    #end if
#end while
if last_was_digit :
    sys.stdout.write("\n")
#end if
sys.exit(exitstatus)
